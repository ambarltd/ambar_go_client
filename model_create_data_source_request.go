/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2023-12-01
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
)

// checks if the CreateDataSourceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDataSourceRequest{}

// CreateDataSourceRequest The request properties for creating an Ambar Data Source.
type CreateDataSourceRequest struct {
	DataSourceConfig CreateDataSourceRequestDataSourceConfig `json:"dataSourceConfig"`
	// A case-insensitive string value describing the type of durable storage system you wish to connect to your Ambar environment. See supported DataSourceTypes in our developer docs for more details on valid values.
	DataSourceType string `json:"dataSourceType"`
}

// NewCreateDataSourceRequest instantiates a new CreateDataSourceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDataSourceRequest(dataSourceConfig CreateDataSourceRequestDataSourceConfig, dataSourceType string) *CreateDataSourceRequest {
	this := CreateDataSourceRequest{}
	this.DataSourceConfig = dataSourceConfig
	this.DataSourceType = dataSourceType
	return &this
}

// NewCreateDataSourceRequestWithDefaults instantiates a new CreateDataSourceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDataSourceRequestWithDefaults() *CreateDataSourceRequest {
	this := CreateDataSourceRequest{}
	return &this
}

// GetDataSourceConfig returns the DataSourceConfig field value
func (o *CreateDataSourceRequest) GetDataSourceConfig() CreateDataSourceRequestDataSourceConfig {
	if o == nil {
		var ret CreateDataSourceRequestDataSourceConfig
		return ret
	}

	return o.DataSourceConfig
}

// GetDataSourceConfigOk returns a tuple with the DataSourceConfig field value
// and a boolean to check if the value has been set.
func (o *CreateDataSourceRequest) GetDataSourceConfigOk() (*CreateDataSourceRequestDataSourceConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSourceConfig, true
}

// SetDataSourceConfig sets field value
func (o *CreateDataSourceRequest) SetDataSourceConfig(v CreateDataSourceRequestDataSourceConfig) {
	o.DataSourceConfig = v
}

// GetDataSourceType returns the DataSourceType field value
func (o *CreateDataSourceRequest) GetDataSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataSourceType
}

// GetDataSourceTypeOk returns a tuple with the DataSourceType field value
// and a boolean to check if the value has been set.
func (o *CreateDataSourceRequest) GetDataSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSourceType, true
}

// SetDataSourceType sets field value
func (o *CreateDataSourceRequest) SetDataSourceType(v string) {
	o.DataSourceType = v
}

func (o CreateDataSourceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDataSourceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataSourceConfig"] = o.DataSourceConfig
	toSerialize["dataSourceType"] = o.DataSourceType
	return toSerialize, nil
}

type NullableCreateDataSourceRequest struct {
	value *CreateDataSourceRequest
	isSet bool
}

func (v NullableCreateDataSourceRequest) Get() *CreateDataSourceRequest {
	return v.value
}

func (v *NullableCreateDataSourceRequest) Set(val *CreateDataSourceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDataSourceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDataSourceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDataSourceRequest(val *CreateDataSourceRequest) *NullableCreateDataSourceRequest {
	return &NullableCreateDataSourceRequest{value: val, isSet: true}
}

func (v NullableCreateDataSourceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDataSourceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


