/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2023-12-01
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
)

// checks if the MysqlDataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MysqlDataSource{}

// MysqlDataSource struct for MysqlDataSource
type MysqlDataSource struct {
	// A case sensitive string for the user Ambar should use to connect to your MySQL database.
	Username string `json:"username"`
	// A case sensitive string for the user Ambar should use to connect to your MySQL database.
	Password string `json:"password"`
	// A case insensitive string for the host on which your MySQL database is running and which Ambar can use to reach the database.
	Hostname string `json:"hostname"`
	// The port number passed as a string which Ambar can use to connect to your MySQL database instance.
	HostPort string `json:"hostPort"`
	// The case sensitive string name of the database on your database host.
	DatabaseName string `json:"databaseName"`
	// The case sensitive string name of the table the DataSource should read.
	TableName string `json:"tableName"`
	// The name of a column where the value for any record is globally unique.
	GloballyUniqueColumnName string `json:"globallyUniqueColumnName"`
	// The name of a column which monotonically increases on database writes.
	IncrementingColumnName string `json:"incrementingColumnName"`
	// A case sensitive string for the name of the column in your table Ambar can partition on.  Note that partition keys must be unique to a given sequence of records.
	PartitioningColumnName string `json:"partitioningColumnName"`
	// A case sensitive, comma separated list string of additional columns to be read from  the table into Ambar.
	AdditionalColumns string `json:"additionalColumns"`
	// The server_id value used when starting the MySQL server. See MySQL docs for more information about this value and its defaults when not configured.
	BinLogReplicationServerId string `json:"binLogReplicationServerId"`
	// The hostname of the server responsible for terminating TLS connections for your server,  for example if your server is behind a load balancer.
	TlsTerminationOverrideHost string `json:"tlsTerminationOverrideHost"`
}

// NewMysqlDataSource instantiates a new MysqlDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMysqlDataSource(username string, password string, hostname string, hostPort string, databaseName string, tableName string, globallyUniqueColumnName string, incrementingColumnName string, partitioningColumnName string, additionalColumns string, binLogReplicationServerId string, tlsTerminationOverrideHost string) *MysqlDataSource {
	this := MysqlDataSource{}
	this.Username = username
	this.Password = password
	this.Hostname = hostname
	this.HostPort = hostPort
	this.DatabaseName = databaseName
	this.TableName = tableName
	this.GloballyUniqueColumnName = globallyUniqueColumnName
	this.IncrementingColumnName = incrementingColumnName
	this.PartitioningColumnName = partitioningColumnName
	this.AdditionalColumns = additionalColumns
	this.BinLogReplicationServerId = binLogReplicationServerId
	this.TlsTerminationOverrideHost = tlsTerminationOverrideHost
	return &this
}

// NewMysqlDataSourceWithDefaults instantiates a new MysqlDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMysqlDataSourceWithDefaults() *MysqlDataSource {
	this := MysqlDataSource{}
	return &this
}

// GetUsername returns the Username field value
func (o *MysqlDataSource) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *MysqlDataSource) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *MysqlDataSource) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *MysqlDataSource) SetPassword(v string) {
	o.Password = v
}

// GetHostname returns the Hostname field value
func (o *MysqlDataSource) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *MysqlDataSource) SetHostname(v string) {
	o.Hostname = v
}

// GetHostPort returns the HostPort field value
func (o *MysqlDataSource) GetHostPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostPort
}

// GetHostPortOk returns a tuple with the HostPort field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetHostPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostPort, true
}

// SetHostPort sets field value
func (o *MysqlDataSource) SetHostPort(v string) {
	o.HostPort = v
}

// GetDatabaseName returns the DatabaseName field value
func (o *MysqlDataSource) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *MysqlDataSource) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetTableName returns the TableName field value
func (o *MysqlDataSource) GetTableName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetTableNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableName, true
}

// SetTableName sets field value
func (o *MysqlDataSource) SetTableName(v string) {
	o.TableName = v
}

// GetGloballyUniqueColumnName returns the GloballyUniqueColumnName field value
func (o *MysqlDataSource) GetGloballyUniqueColumnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GloballyUniqueColumnName
}

// GetGloballyUniqueColumnNameOk returns a tuple with the GloballyUniqueColumnName field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetGloballyUniqueColumnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GloballyUniqueColumnName, true
}

// SetGloballyUniqueColumnName sets field value
func (o *MysqlDataSource) SetGloballyUniqueColumnName(v string) {
	o.GloballyUniqueColumnName = v
}

// GetIncrementingColumnName returns the IncrementingColumnName field value
func (o *MysqlDataSource) GetIncrementingColumnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IncrementingColumnName
}

// GetIncrementingColumnNameOk returns a tuple with the IncrementingColumnName field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetIncrementingColumnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncrementingColumnName, true
}

// SetIncrementingColumnName sets field value
func (o *MysqlDataSource) SetIncrementingColumnName(v string) {
	o.IncrementingColumnName = v
}

// GetPartitioningColumnName returns the PartitioningColumnName field value
func (o *MysqlDataSource) GetPartitioningColumnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PartitioningColumnName
}

// GetPartitioningColumnNameOk returns a tuple with the PartitioningColumnName field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetPartitioningColumnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartitioningColumnName, true
}

// SetPartitioningColumnName sets field value
func (o *MysqlDataSource) SetPartitioningColumnName(v string) {
	o.PartitioningColumnName = v
}

// GetAdditionalColumns returns the AdditionalColumns field value
func (o *MysqlDataSource) GetAdditionalColumns() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdditionalColumns
}

// GetAdditionalColumnsOk returns a tuple with the AdditionalColumns field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetAdditionalColumnsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdditionalColumns, true
}

// SetAdditionalColumns sets field value
func (o *MysqlDataSource) SetAdditionalColumns(v string) {
	o.AdditionalColumns = v
}

// GetBinLogReplicationServerId returns the BinLogReplicationServerId field value
func (o *MysqlDataSource) GetBinLogReplicationServerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BinLogReplicationServerId
}

// GetBinLogReplicationServerIdOk returns a tuple with the BinLogReplicationServerId field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetBinLogReplicationServerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BinLogReplicationServerId, true
}

// SetBinLogReplicationServerId sets field value
func (o *MysqlDataSource) SetBinLogReplicationServerId(v string) {
	o.BinLogReplicationServerId = v
}

// GetTlsTerminationOverrideHost returns the TlsTerminationOverrideHost field value
func (o *MysqlDataSource) GetTlsTerminationOverrideHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TlsTerminationOverrideHost
}

// GetTlsTerminationOverrideHostOk returns a tuple with the TlsTerminationOverrideHost field value
// and a boolean to check if the value has been set.
func (o *MysqlDataSource) GetTlsTerminationOverrideHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TlsTerminationOverrideHost, true
}

// SetTlsTerminationOverrideHost sets field value
func (o *MysqlDataSource) SetTlsTerminationOverrideHost(v string) {
	o.TlsTerminationOverrideHost = v
}

func (o MysqlDataSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MysqlDataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	toSerialize["hostname"] = o.Hostname
	toSerialize["hostPort"] = o.HostPort
	toSerialize["databaseName"] = o.DatabaseName
	toSerialize["tableName"] = o.TableName
	toSerialize["globallyUniqueColumnName"] = o.GloballyUniqueColumnName
	toSerialize["incrementingColumnName"] = o.IncrementingColumnName
	toSerialize["partitioningColumnName"] = o.PartitioningColumnName
	toSerialize["additionalColumns"] = o.AdditionalColumns
	toSerialize["binLogReplicationServerId"] = o.BinLogReplicationServerId
	toSerialize["tlsTerminationOverrideHost"] = o.TlsTerminationOverrideHost
	return toSerialize, nil
}

type NullableMysqlDataSource struct {
	value *MysqlDataSource
	isSet bool
}

func (v NullableMysqlDataSource) Get() *MysqlDataSource {
	return v.value
}

func (v *NullableMysqlDataSource) Set(val *MysqlDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMysqlDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMysqlDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMysqlDataSource(val *MysqlDataSource) *NullableMysqlDataSource {
	return &NullableMysqlDataSource{value: val, isSet: true}
}

func (v NullableMysqlDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMysqlDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


