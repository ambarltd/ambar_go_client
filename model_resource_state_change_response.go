/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2024-04-25
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourceStateChangeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceStateChangeResponse{}

// ResourceStateChangeResponse struct for ResourceStateChangeResponse
type ResourceStateChangeResponse struct {
	ResourceId string `json:"resourceId"`
	State string `json:"state"`
}

type _ResourceStateChangeResponse ResourceStateChangeResponse

// NewResourceStateChangeResponse instantiates a new ResourceStateChangeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceStateChangeResponse(resourceId string, state string) *ResourceStateChangeResponse {
	this := ResourceStateChangeResponse{}
	this.ResourceId = resourceId
	this.State = state
	return &this
}

// NewResourceStateChangeResponseWithDefaults instantiates a new ResourceStateChangeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceStateChangeResponseWithDefaults() *ResourceStateChangeResponse {
	this := ResourceStateChangeResponse{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *ResourceStateChangeResponse) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceStateChangeResponse) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceStateChangeResponse) SetResourceId(v string) {
	o.ResourceId = v
}

// GetState returns the State field value
func (o *ResourceStateChangeResponse) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ResourceStateChangeResponse) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ResourceStateChangeResponse) SetState(v string) {
	o.State = v
}

func (o ResourceStateChangeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceStateChangeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceId"] = o.ResourceId
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *ResourceStateChangeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceId",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceStateChangeResponse := _ResourceStateChangeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceStateChangeResponse)

	if err != nil {
		return err
	}

	*o = ResourceStateChangeResponse(varResourceStateChangeResponse)

	return err
}

type NullableResourceStateChangeResponse struct {
	value *ResourceStateChangeResponse
	isSet bool
}

func (v NullableResourceStateChangeResponse) Get() *ResourceStateChangeResponse {
	return v.value
}

func (v *NullableResourceStateChangeResponse) Set(val *ResourceStateChangeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceStateChangeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceStateChangeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceStateChangeResponse(val *ResourceStateChangeResponse) *NullableResourceStateChangeResponse {
	return &NullableResourceStateChangeResponse{value: val, isSet: true}
}

func (v NullableResourceStateChangeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceStateChangeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


