/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2023-12-01
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
	"fmt"
)

// CreateDataSourceRequestDataSourceConfig - A object containing inputs which are specific depending on the type of DataSource being created. See out developer docs for supported DataSourceTypes and corresponding configurations.
type CreateDataSourceRequestDataSourceConfig struct {
	PostgresDataSource *PostgresDataSource
}

// PostgresDataSourceAsCreateDataSourceRequestDataSourceConfig is a convenience function that returns PostgresDataSource wrapped in CreateDataSourceRequestDataSourceConfig
func PostgresDataSourceAsCreateDataSourceRequestDataSourceConfig(v *PostgresDataSource) CreateDataSourceRequestDataSourceConfig {
	return CreateDataSourceRequestDataSourceConfig{
		PostgresDataSource: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateDataSourceRequestDataSourceConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PostgresDataSource
	err = newStrictDecoder(data).Decode(&dst.PostgresDataSource)
	if err == nil {
		jsonPostgresDataSource, _ := json.Marshal(dst.PostgresDataSource)
		if string(jsonPostgresDataSource) == "{}" { // empty struct
			dst.PostgresDataSource = nil
		} else {
			match++
		}
	} else {
		dst.PostgresDataSource = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PostgresDataSource = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateDataSourceRequestDataSourceConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateDataSourceRequestDataSourceConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateDataSourceRequestDataSourceConfig) MarshalJSON() ([]byte, error) {
	if src.PostgresDataSource != nil {
		return json.Marshal(&src.PostgresDataSource)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateDataSourceRequestDataSourceConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PostgresDataSource != nil {
		return obj.PostgresDataSource
	}

	// all schemas are nil
	return nil
}

type NullableCreateDataSourceRequestDataSourceConfig struct {
	value *CreateDataSourceRequestDataSourceConfig
	isSet bool
}

func (v NullableCreateDataSourceRequestDataSourceConfig) Get() *CreateDataSourceRequestDataSourceConfig {
	return v.value
}

func (v *NullableCreateDataSourceRequestDataSourceConfig) Set(val *CreateDataSourceRequestDataSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDataSourceRequestDataSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDataSourceRequestDataSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDataSourceRequestDataSourceConfig(val *CreateDataSourceRequestDataSourceConfig) *NullableCreateDataSourceRequestDataSourceConfig {
	return &NullableCreateDataSourceRequestDataSourceConfig{value: val, isSet: true}
}

func (v NullableCreateDataSourceRequestDataSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDataSourceRequestDataSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


