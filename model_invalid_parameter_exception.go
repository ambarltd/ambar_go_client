/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2023-12-01
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
)

// checks if the InvalidParameterException type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvalidParameterException{}

// InvalidParameterException struct for InvalidParameterException
type InvalidParameterException struct {
	InvalidParameterException string `json:"InvalidParameterException"`
}

// NewInvalidParameterException instantiates a new InvalidParameterException object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidParameterException(invalidParameterException string) *InvalidParameterException {
	this := InvalidParameterException{}
	this.InvalidParameterException = invalidParameterException
	return &this
}

// NewInvalidParameterExceptionWithDefaults instantiates a new InvalidParameterException object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidParameterExceptionWithDefaults() *InvalidParameterException {
	this := InvalidParameterException{}
	return &this
}

// GetInvalidParameterException returns the InvalidParameterException field value
func (o *InvalidParameterException) GetInvalidParameterException() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvalidParameterException
}

// GetInvalidParameterExceptionOk returns a tuple with the InvalidParameterException field value
// and a boolean to check if the value has been set.
func (o *InvalidParameterException) GetInvalidParameterExceptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvalidParameterException, true
}

// SetInvalidParameterException sets field value
func (o *InvalidParameterException) SetInvalidParameterException(v string) {
	o.InvalidParameterException = v
}

func (o InvalidParameterException) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvalidParameterException) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["InvalidParameterException"] = o.InvalidParameterException
	return toSerialize, nil
}

type NullableInvalidParameterException struct {
	value *InvalidParameterException
	isSet bool
}

func (v NullableInvalidParameterException) Get() *InvalidParameterException {
	return v.value
}

func (v *NullableInvalidParameterException) Set(val *InvalidParameterException) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidParameterException) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidParameterException) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidParameterException(val *InvalidParameterException) *NullableInvalidParameterException {
	return &NullableInvalidParameterException{value: val, isSet: true}
}

func (v NullableInvalidParameterException) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidParameterException) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


