/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2025-04-02
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateDataSourceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDataSourceRequest{}

// UpdateDataSourceRequest The request properties for updating an Ambar Data Source.
type UpdateDataSourceRequest struct {
	// An Ambar resourceId.
	ResourceId string `json:"resourceId"`
	// The hostname of the database which the DataSource connects to.
	Hostname *string `json:"hostname,omitempty"`
	// The port on which the database host is listening for incoming connections.
	Port *string `json:"port,omitempty"`
	// The hostname of an alternative host handling TLS termination.
	TlsTerminationOverrideHost *string `json:"tlsTerminationOverrideHost,omitempty"`
}

type _UpdateDataSourceRequest UpdateDataSourceRequest

// NewUpdateDataSourceRequest instantiates a new UpdateDataSourceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDataSourceRequest(resourceId string) *UpdateDataSourceRequest {
	this := UpdateDataSourceRequest{}
	this.ResourceId = resourceId
	return &this
}

// NewUpdateDataSourceRequestWithDefaults instantiates a new UpdateDataSourceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDataSourceRequestWithDefaults() *UpdateDataSourceRequest {
	this := UpdateDataSourceRequest{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *UpdateDataSourceRequest) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *UpdateDataSourceRequest) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *UpdateDataSourceRequest) SetResourceId(v string) {
	o.ResourceId = v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *UpdateDataSourceRequest) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDataSourceRequest) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *UpdateDataSourceRequest) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *UpdateDataSourceRequest) SetHostname(v string) {
	o.Hostname = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *UpdateDataSourceRequest) GetPort() string {
	if o == nil || IsNil(o.Port) {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDataSourceRequest) GetPortOk() (*string, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *UpdateDataSourceRequest) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *UpdateDataSourceRequest) SetPort(v string) {
	o.Port = &v
}

// GetTlsTerminationOverrideHost returns the TlsTerminationOverrideHost field value if set, zero value otherwise.
func (o *UpdateDataSourceRequest) GetTlsTerminationOverrideHost() string {
	if o == nil || IsNil(o.TlsTerminationOverrideHost) {
		var ret string
		return ret
	}
	return *o.TlsTerminationOverrideHost
}

// GetTlsTerminationOverrideHostOk returns a tuple with the TlsTerminationOverrideHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDataSourceRequest) GetTlsTerminationOverrideHostOk() (*string, bool) {
	if o == nil || IsNil(o.TlsTerminationOverrideHost) {
		return nil, false
	}
	return o.TlsTerminationOverrideHost, true
}

// HasTlsTerminationOverrideHost returns a boolean if a field has been set.
func (o *UpdateDataSourceRequest) HasTlsTerminationOverrideHost() bool {
	if o != nil && !IsNil(o.TlsTerminationOverrideHost) {
		return true
	}

	return false
}

// SetTlsTerminationOverrideHost gets a reference to the given string and assigns it to the TlsTerminationOverrideHost field.
func (o *UpdateDataSourceRequest) SetTlsTerminationOverrideHost(v string) {
	o.TlsTerminationOverrideHost = &v
}

func (o UpdateDataSourceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDataSourceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceId"] = o.ResourceId
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.TlsTerminationOverrideHost) {
		toSerialize["tlsTerminationOverrideHost"] = o.TlsTerminationOverrideHost
	}
	return toSerialize, nil
}

func (o *UpdateDataSourceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateDataSourceRequest := _UpdateDataSourceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateDataSourceRequest)

	if err != nil {
		return err
	}

	*o = UpdateDataSourceRequest(varUpdateDataSourceRequest)

	return err
}

type NullableUpdateDataSourceRequest struct {
	value *UpdateDataSourceRequest
	isSet bool
}

func (v NullableUpdateDataSourceRequest) Get() *UpdateDataSourceRequest {
	return v.value
}

func (v *NullableUpdateDataSourceRequest) Set(val *UpdateDataSourceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDataSourceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDataSourceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDataSourceRequest(val *UpdateDataSourceRequest) *NullableUpdateDataSourceRequest {
	return &NullableUpdateDataSourceRequest{value: val, isSet: true}
}

func (v NullableUpdateDataSourceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDataSourceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


