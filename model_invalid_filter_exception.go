/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2023-12-01
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
)

// checks if the InvalidFilterException type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvalidFilterException{}

// InvalidFilterException struct for InvalidFilterException
type InvalidFilterException struct {
	InvalidFilterException string `json:"InvalidFilterException"`
}

// NewInvalidFilterException instantiates a new InvalidFilterException object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidFilterException(invalidFilterException string) *InvalidFilterException {
	this := InvalidFilterException{}
	this.InvalidFilterException = invalidFilterException
	return &this
}

// NewInvalidFilterExceptionWithDefaults instantiates a new InvalidFilterException object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidFilterExceptionWithDefaults() *InvalidFilterException {
	this := InvalidFilterException{}
	return &this
}

// GetInvalidFilterException returns the InvalidFilterException field value
func (o *InvalidFilterException) GetInvalidFilterException() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvalidFilterException
}

// GetInvalidFilterExceptionOk returns a tuple with the InvalidFilterException field value
// and a boolean to check if the value has been set.
func (o *InvalidFilterException) GetInvalidFilterExceptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvalidFilterException, true
}

// SetInvalidFilterException sets field value
func (o *InvalidFilterException) SetInvalidFilterException(v string) {
	o.InvalidFilterException = v
}

func (o InvalidFilterException) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvalidFilterException) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["InvalidFilterException"] = o.InvalidFilterException
	return toSerialize, nil
}

type NullableInvalidFilterException struct {
	value *InvalidFilterException
	isSet bool
}

func (v NullableInvalidFilterException) Get() *InvalidFilterException {
	return v.value
}

func (v *NullableInvalidFilterException) Set(val *InvalidFilterException) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidFilterException) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidFilterException) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidFilterException(val *InvalidFilterException) *NullableInvalidFilterException {
	return &NullableInvalidFilterException{value: val, isSet: true}
}

func (v NullableInvalidFilterException) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidFilterException) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


