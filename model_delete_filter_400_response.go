/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2025-04-02
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DeleteFilter400Response - struct for DeleteFilter400Response
type DeleteFilter400Response struct {
	InvalidParameterException *InvalidParameterException
	ResourceInvalidStateException *ResourceInvalidStateException
}

// InvalidParameterExceptionAsDeleteFilter400Response is a convenience function that returns InvalidParameterException wrapped in DeleteFilter400Response
func InvalidParameterExceptionAsDeleteFilter400Response(v *InvalidParameterException) DeleteFilter400Response {
	return DeleteFilter400Response{
		InvalidParameterException: v,
	}
}

// ResourceInvalidStateExceptionAsDeleteFilter400Response is a convenience function that returns ResourceInvalidStateException wrapped in DeleteFilter400Response
func ResourceInvalidStateExceptionAsDeleteFilter400Response(v *ResourceInvalidStateException) DeleteFilter400Response {
	return DeleteFilter400Response{
		ResourceInvalidStateException: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeleteFilter400Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InvalidParameterException
	err = newStrictDecoder(data).Decode(&dst.InvalidParameterException)
	if err == nil {
		jsonInvalidParameterException, _ := json.Marshal(dst.InvalidParameterException)
		if string(jsonInvalidParameterException) == "{}" { // empty struct
			dst.InvalidParameterException = nil
		} else {
			if err = validator.Validate(dst.InvalidParameterException); err != nil {
				dst.InvalidParameterException = nil
			} else {
				match++
			}
		}
	} else {
		dst.InvalidParameterException = nil
	}

	// try to unmarshal data into ResourceInvalidStateException
	err = newStrictDecoder(data).Decode(&dst.ResourceInvalidStateException)
	if err == nil {
		jsonResourceInvalidStateException, _ := json.Marshal(dst.ResourceInvalidStateException)
		if string(jsonResourceInvalidStateException) == "{}" { // empty struct
			dst.ResourceInvalidStateException = nil
		} else {
			if err = validator.Validate(dst.ResourceInvalidStateException); err != nil {
				dst.ResourceInvalidStateException = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResourceInvalidStateException = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InvalidParameterException = nil
		dst.ResourceInvalidStateException = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeleteFilter400Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeleteFilter400Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeleteFilter400Response) MarshalJSON() ([]byte, error) {
	if src.InvalidParameterException != nil {
		return json.Marshal(&src.InvalidParameterException)
	}

	if src.ResourceInvalidStateException != nil {
		return json.Marshal(&src.ResourceInvalidStateException)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeleteFilter400Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InvalidParameterException != nil {
		return obj.InvalidParameterException
	}

	if obj.ResourceInvalidStateException != nil {
		return obj.ResourceInvalidStateException
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DeleteFilter400Response) GetActualInstanceValue() (interface{}) {
	if obj.InvalidParameterException != nil {
		return *obj.InvalidParameterException
	}

	if obj.ResourceInvalidStateException != nil {
		return *obj.ResourceInvalidStateException
	}

	// all schemas are nil
	return nil
}

type NullableDeleteFilter400Response struct {
	value *DeleteFilter400Response
	isSet bool
}

func (v NullableDeleteFilter400Response) Get() *DeleteFilter400Response {
	return v.value
}

func (v *NullableDeleteFilter400Response) Set(val *DeleteFilter400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteFilter400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteFilter400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteFilter400Response(val *DeleteFilter400Response) *NullableDeleteFilter400Response {
	return &NullableDeleteFilter400Response{value: val, isSet: true}
}

func (v NullableDeleteFilter400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteFilter400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


