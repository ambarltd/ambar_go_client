/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2023-12-01
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
)

// checks if the Filter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Filter{}

// Filter The properties describing an Ambar Filter.
type Filter struct {
	// The UTC time at which the Filter was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The list of DataDestination ResourceIds which use this Filter.
	DataDestinationsUsingFilter []string `json:"dataDestinationsUsingFilter,omitempty"`
	// The list of DataSource ResourceIds which this Filter will read from.
	DataSourcesInFilter []string `json:"dataSourcesInFilter,omitempty"`
	// The Ambar resourceId corresponding to this Filter.
	ResourceId *string `json:"resourceId,omitempty"`
	// The ResourceState of this Filter. For possible values see ResourceState in our developer docs.
	State *string `json:"state,omitempty"`
}

// NewFilter instantiates a new Filter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilter() *Filter {
	this := Filter{}
	return &this
}

// NewFilterWithDefaults instantiates a new Filter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterWithDefaults() *Filter {
	this := Filter{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Filter) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Filter) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Filter) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDataDestinationsUsingFilter returns the DataDestinationsUsingFilter field value if set, zero value otherwise.
func (o *Filter) GetDataDestinationsUsingFilter() []string {
	if o == nil || IsNil(o.DataDestinationsUsingFilter) {
		var ret []string
		return ret
	}
	return o.DataDestinationsUsingFilter
}

// GetDataDestinationsUsingFilterOk returns a tuple with the DataDestinationsUsingFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetDataDestinationsUsingFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.DataDestinationsUsingFilter) {
		return nil, false
	}
	return o.DataDestinationsUsingFilter, true
}

// HasDataDestinationsUsingFilter returns a boolean if a field has been set.
func (o *Filter) HasDataDestinationsUsingFilter() bool {
	if o != nil && !IsNil(o.DataDestinationsUsingFilter) {
		return true
	}

	return false
}

// SetDataDestinationsUsingFilter gets a reference to the given []string and assigns it to the DataDestinationsUsingFilter field.
func (o *Filter) SetDataDestinationsUsingFilter(v []string) {
	o.DataDestinationsUsingFilter = v
}

// GetDataSourcesInFilter returns the DataSourcesInFilter field value if set, zero value otherwise.
func (o *Filter) GetDataSourcesInFilter() []string {
	if o == nil || IsNil(o.DataSourcesInFilter) {
		var ret []string
		return ret
	}
	return o.DataSourcesInFilter
}

// GetDataSourcesInFilterOk returns a tuple with the DataSourcesInFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetDataSourcesInFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.DataSourcesInFilter) {
		return nil, false
	}
	return o.DataSourcesInFilter, true
}

// HasDataSourcesInFilter returns a boolean if a field has been set.
func (o *Filter) HasDataSourcesInFilter() bool {
	if o != nil && !IsNil(o.DataSourcesInFilter) {
		return true
	}

	return false
}

// SetDataSourcesInFilter gets a reference to the given []string and assigns it to the DataSourcesInFilter field.
func (o *Filter) SetDataSourcesInFilter(v []string) {
	o.DataSourcesInFilter = v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *Filter) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *Filter) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *Filter) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Filter) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Filter) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Filter) SetState(v string) {
	o.State = &v
}

func (o Filter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Filter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DataDestinationsUsingFilter) {
		toSerialize["dataDestinationsUsingFilter"] = o.DataDestinationsUsingFilter
	}
	if !IsNil(o.DataSourcesInFilter) {
		toSerialize["dataSourcesInFilter"] = o.DataSourcesInFilter
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableFilter struct {
	value *Filter
	isSet bool
}

func (v NullableFilter) Get() *Filter {
	return v.value
}

func (v *NullableFilter) Set(val *Filter) {
	v.value = val
	v.isSet = true
}

func (v NullableFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilter(val *Filter) *NullableFilter {
	return &NullableFilter{value: val, isSet: true}
}

func (v NullableFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


