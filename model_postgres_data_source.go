/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2023-12-01
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
)

// checks if the PostgresDataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostgresDataSource{}

// PostgresDataSource struct for PostgresDataSource
type PostgresDataSource struct {
	// A case insensitive string for the host on which your Postgres database is running and which Ambar can use to reach the database.
	Hostname string `json:"hostname"`
	// The port number passed as a string which Ambar can use to connect to your Postgres database instance.
	HostPort string `json:"hostPort"`
	// The case sensitive string name of the database on your database host.
	DatabaseName string `json:"databaseName"`
	// The case sensitive string name of the table the DataSource should read.
	TableName string `json:"tableName"`
	// The named publication Ambar should use to indicate to Postgres what tables Ambar will be replicating from.  The publication name must be distinct from the name of any existing publication in the current database. See Postgres documentation for your specific version of Postgres for more information on Postgres publications.
	PublicationName string `json:"publicationName"`
	// A case sensitive, comma separated list string of columns which Ambar should read from the database. The ordering should be consistent with the table from which Ambar will read.
	AdditionalColumns string `json:"additionalColumns"`
}

// NewPostgresDataSource instantiates a new PostgresDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostgresDataSource(hostname string, hostPort string, databaseName string, tableName string, publicationName string, additionalColumns string) *PostgresDataSource {
	this := PostgresDataSource{}
	this.Hostname = hostname
	this.HostPort = hostPort
	this.DatabaseName = databaseName
	this.TableName = tableName
	this.PublicationName = publicationName
	this.AdditionalColumns = additionalColumns
	return &this
}

// NewPostgresDataSourceWithDefaults instantiates a new PostgresDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostgresDataSourceWithDefaults() *PostgresDataSource {
	this := PostgresDataSource{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *PostgresDataSource) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *PostgresDataSource) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *PostgresDataSource) SetHostname(v string) {
	o.Hostname = v
}

// GetHostPort returns the HostPort field value
func (o *PostgresDataSource) GetHostPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostPort
}

// GetHostPortOk returns a tuple with the HostPort field value
// and a boolean to check if the value has been set.
func (o *PostgresDataSource) GetHostPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostPort, true
}

// SetHostPort sets field value
func (o *PostgresDataSource) SetHostPort(v string) {
	o.HostPort = v
}

// GetDatabaseName returns the DatabaseName field value
func (o *PostgresDataSource) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *PostgresDataSource) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *PostgresDataSource) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetTableName returns the TableName field value
func (o *PostgresDataSource) GetTableName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value
// and a boolean to check if the value has been set.
func (o *PostgresDataSource) GetTableNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableName, true
}

// SetTableName sets field value
func (o *PostgresDataSource) SetTableName(v string) {
	o.TableName = v
}

// GetPublicationName returns the PublicationName field value
func (o *PostgresDataSource) GetPublicationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicationName
}

// GetPublicationNameOk returns a tuple with the PublicationName field value
// and a boolean to check if the value has been set.
func (o *PostgresDataSource) GetPublicationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicationName, true
}

// SetPublicationName sets field value
func (o *PostgresDataSource) SetPublicationName(v string) {
	o.PublicationName = v
}

// GetAdditionalColumns returns the AdditionalColumns field value
func (o *PostgresDataSource) GetAdditionalColumns() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdditionalColumns
}

// GetAdditionalColumnsOk returns a tuple with the AdditionalColumns field value
// and a boolean to check if the value has been set.
func (o *PostgresDataSource) GetAdditionalColumnsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdditionalColumns, true
}

// SetAdditionalColumns sets field value
func (o *PostgresDataSource) SetAdditionalColumns(v string) {
	o.AdditionalColumns = v
}

func (o PostgresDataSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostgresDataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hostname"] = o.Hostname
	toSerialize["hostPort"] = o.HostPort
	toSerialize["databaseName"] = o.DatabaseName
	toSerialize["tableName"] = o.TableName
	toSerialize["publicationName"] = o.PublicationName
	toSerialize["additionalColumns"] = o.AdditionalColumns
	return toSerialize, nil
}

type NullablePostgresDataSource struct {
	value *PostgresDataSource
	isSet bool
}

func (v NullablePostgresDataSource) Get() *PostgresDataSource {
	return v.value
}

func (v *NullablePostgresDataSource) Set(val *PostgresDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgresDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgresDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgresDataSource(val *PostgresDataSource) *NullablePostgresDataSource {
	return &NullablePostgresDataSource{value: val, isSet: true}
}

func (v NullablePostgresDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgresDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


