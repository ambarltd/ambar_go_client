/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2023-12-01
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
)

// checks if the DataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSource{}

// DataSource The properties describing an Ambar Data Source.
type DataSource struct {
	// The UTC time at which the DataSource was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The properties describing the configuration details for the given DataSourceType.
	DataSourceConfig map[string]interface{} `json:"dataSourceConfig,omitempty"`
	// The DataSourceType describing the type of durable storage system this DataSource pulls record sequences from.
	DataSourceType *string `json:"dataSourceType,omitempty"`
	// The Ambar resourceId corresponding to this DataSource.
	ResourceId *string `json:"resourceId,omitempty"`
	// The ResourceState of this DataSource. For possible values see ResourceState in our developer docs.
	State *string `json:"state,omitempty"`
}

// NewDataSource instantiates a new DataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSource() *DataSource {
	this := DataSource{}
	return &this
}

// NewDataSourceWithDefaults instantiates a new DataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceWithDefaults() *DataSource {
	this := DataSource{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DataSource) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DataSource) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *DataSource) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDataSourceConfig returns the DataSourceConfig field value if set, zero value otherwise.
func (o *DataSource) GetDataSourceConfig() map[string]interface{} {
	if o == nil || IsNil(o.DataSourceConfig) {
		var ret map[string]interface{}
		return ret
	}
	return o.DataSourceConfig
}

// GetDataSourceConfigOk returns a tuple with the DataSourceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetDataSourceConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DataSourceConfig) {
		return map[string]interface{}{}, false
	}
	return o.DataSourceConfig, true
}

// HasDataSourceConfig returns a boolean if a field has been set.
func (o *DataSource) HasDataSourceConfig() bool {
	if o != nil && !IsNil(o.DataSourceConfig) {
		return true
	}

	return false
}

// SetDataSourceConfig gets a reference to the given map[string]interface{} and assigns it to the DataSourceConfig field.
func (o *DataSource) SetDataSourceConfig(v map[string]interface{}) {
	o.DataSourceConfig = v
}

// GetDataSourceType returns the DataSourceType field value if set, zero value otherwise.
func (o *DataSource) GetDataSourceType() string {
	if o == nil || IsNil(o.DataSourceType) {
		var ret string
		return ret
	}
	return *o.DataSourceType
}

// GetDataSourceTypeOk returns a tuple with the DataSourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetDataSourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataSourceType) {
		return nil, false
	}
	return o.DataSourceType, true
}

// HasDataSourceType returns a boolean if a field has been set.
func (o *DataSource) HasDataSourceType() bool {
	if o != nil && !IsNil(o.DataSourceType) {
		return true
	}

	return false
}

// SetDataSourceType gets a reference to the given string and assigns it to the DataSourceType field.
func (o *DataSource) SetDataSourceType(v string) {
	o.DataSourceType = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *DataSource) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *DataSource) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *DataSource) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DataSource) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DataSource) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DataSource) SetState(v string) {
	o.State = &v
}

func (o DataSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DataSourceConfig) {
		toSerialize["dataSourceConfig"] = o.DataSourceConfig
	}
	if !IsNil(o.DataSourceType) {
		toSerialize["dataSourceType"] = o.DataSourceType
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableDataSource struct {
	value *DataSource
	isSet bool
}

func (v NullableDataSource) Get() *DataSource {
	return v.value
}

func (v *NullableDataSource) Set(val *DataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSource(val *DataSource) *NullableDataSource {
	return &NullableDataSource{value: val, isSet: true}
}

func (v NullableDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


