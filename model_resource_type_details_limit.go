/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2024-04-25
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
)

// checks if the ResourceTypeDetailsLimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceTypeDetailsLimit{}

// ResourceTypeDetailsLimit struct for ResourceTypeDetailsLimit
type ResourceTypeDetailsLimit struct {
	Limit *int32 `json:"limit,omitempty"`
	Used *int32 `json:"used,omitempty"`
}

// NewResourceTypeDetailsLimit instantiates a new ResourceTypeDetailsLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceTypeDetailsLimit() *ResourceTypeDetailsLimit {
	this := ResourceTypeDetailsLimit{}
	return &this
}

// NewResourceTypeDetailsLimitWithDefaults instantiates a new ResourceTypeDetailsLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTypeDetailsLimitWithDefaults() *ResourceTypeDetailsLimit {
	this := ResourceTypeDetailsLimit{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ResourceTypeDetailsLimit) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeDetailsLimit) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ResourceTypeDetailsLimit) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *ResourceTypeDetailsLimit) SetLimit(v int32) {
	o.Limit = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *ResourceTypeDetailsLimit) GetUsed() int32 {
	if o == nil || IsNil(o.Used) {
		var ret int32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeDetailsLimit) GetUsedOk() (*int32, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *ResourceTypeDetailsLimit) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given int32 and assigns it to the Used field.
func (o *ResourceTypeDetailsLimit) SetUsed(v int32) {
	o.Used = &v
}

func (o ResourceTypeDetailsLimit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceTypeDetailsLimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	return toSerialize, nil
}

type NullableResourceTypeDetailsLimit struct {
	value *ResourceTypeDetailsLimit
	isSet bool
}

func (v NullableResourceTypeDetailsLimit) Get() *ResourceTypeDetailsLimit {
	return v.value
}

func (v *NullableResourceTypeDetailsLimit) Set(val *ResourceTypeDetailsLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTypeDetailsLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTypeDetailsLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTypeDetailsLimit(val *ResourceTypeDetailsLimit) *NullableResourceTypeDetailsLimit {
	return &NullableResourceTypeDetailsLimit{value: val, isSet: true}
}

func (v NullableResourceTypeDetailsLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTypeDetailsLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


