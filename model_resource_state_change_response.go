/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2023-12-01
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
)

// checks if the ResourceStateChangeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceStateChangeResponse{}

// ResourceStateChangeResponse struct for ResourceStateChangeResponse
type ResourceStateChangeResponse struct {
	ResourceId string `json:"resourceId"`
	ResourceState string `json:"resourceState"`
}

// NewResourceStateChangeResponse instantiates a new ResourceStateChangeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceStateChangeResponse(resourceId string, resourceState string) *ResourceStateChangeResponse {
	this := ResourceStateChangeResponse{}
	this.ResourceId = resourceId
	this.ResourceState = resourceState
	return &this
}

// NewResourceStateChangeResponseWithDefaults instantiates a new ResourceStateChangeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceStateChangeResponseWithDefaults() *ResourceStateChangeResponse {
	this := ResourceStateChangeResponse{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *ResourceStateChangeResponse) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceStateChangeResponse) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceStateChangeResponse) SetResourceId(v string) {
	o.ResourceId = v
}

// GetResourceState returns the ResourceState field value
func (o *ResourceStateChangeResponse) GetResourceState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceState
}

// GetResourceStateOk returns a tuple with the ResourceState field value
// and a boolean to check if the value has been set.
func (o *ResourceStateChangeResponse) GetResourceStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceState, true
}

// SetResourceState sets field value
func (o *ResourceStateChangeResponse) SetResourceState(v string) {
	o.ResourceState = v
}

func (o ResourceStateChangeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceStateChangeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceId"] = o.ResourceId
	toSerialize["resourceState"] = o.ResourceState
	return toSerialize, nil
}

type NullableResourceStateChangeResponse struct {
	value *ResourceStateChangeResponse
	isSet bool
}

func (v NullableResourceStateChangeResponse) Get() *ResourceStateChangeResponse {
	return v.value
}

func (v *NullableResourceStateChangeResponse) Set(val *ResourceStateChangeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceStateChangeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceStateChangeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceStateChangeResponse(val *ResourceStateChangeResponse) *NullableResourceStateChangeResponse {
	return &NullableResourceStateChangeResponse{value: val, isSet: true}
}

func (v NullableResourceStateChangeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceStateChangeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


