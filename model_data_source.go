/*
Ambar OpenAPI Specification

Details about communicating with Ambar.cloud public endpoints. Supported HTTP rest endpoints and their  request and response details.

API version: 2023-12-01
Contact: contact@ambar.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Ambar

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSource{}

// DataSource The properties describing an Ambar Data Source.
type DataSource struct {
	// The UTC time at which the DataSource was created.
	CreatedAt string `json:"createdAt"`
	// The properties describing the configuration details for the given DataSourceType.
	DataSourceConfig map[string]interface{} `json:"dataSourceConfig"`
	// The name of a column which monotonically increases on database writes.
	SerialColumn string `json:"serialColumn"`
	// A case sensitive string for the name of the column in your table Ambar can partition on.  Note that partition keys must be unique to a given sequence of records.
	PartitioningColumn string `json:"partitioningColumn"`
	// The DataSourceType describing the type of durable storage system this DataSource pulls record sequences from.
	DataSourceType string `json:"dataSourceType"`
	// The Ambar resourceId corresponding to this DataSource.
	ResourceId string `json:"resourceId"`
	// The ResourceState of this DataSource. For possible values see ResourceState in our developer docs.
	State string `json:"state"`
	// A user friendly description of this DataSource.
	Description *string `json:"description,omitempty"`
}

type _DataSource DataSource

// NewDataSource instantiates a new DataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSource(createdAt string, dataSourceConfig map[string]interface{}, serialColumn string, partitioningColumn string, dataSourceType string, resourceId string, state string) *DataSource {
	this := DataSource{}
	this.CreatedAt = createdAt
	this.DataSourceConfig = dataSourceConfig
	this.SerialColumn = serialColumn
	this.PartitioningColumn = partitioningColumn
	this.DataSourceType = dataSourceType
	this.ResourceId = resourceId
	this.State = state
	return &this
}

// NewDataSourceWithDefaults instantiates a new DataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceWithDefaults() *DataSource {
	this := DataSource{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *DataSource) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DataSource) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DataSource) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetDataSourceConfig returns the DataSourceConfig field value
func (o *DataSource) GetDataSourceConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.DataSourceConfig
}

// GetDataSourceConfigOk returns a tuple with the DataSourceConfig field value
// and a boolean to check if the value has been set.
func (o *DataSource) GetDataSourceConfigOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.DataSourceConfig, true
}

// SetDataSourceConfig sets field value
func (o *DataSource) SetDataSourceConfig(v map[string]interface{}) {
	o.DataSourceConfig = v
}

// GetSerialColumn returns the SerialColumn field value
func (o *DataSource) GetSerialColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialColumn
}

// GetSerialColumnOk returns a tuple with the SerialColumn field value
// and a boolean to check if the value has been set.
func (o *DataSource) GetSerialColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialColumn, true
}

// SetSerialColumn sets field value
func (o *DataSource) SetSerialColumn(v string) {
	o.SerialColumn = v
}

// GetPartitioningColumn returns the PartitioningColumn field value
func (o *DataSource) GetPartitioningColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PartitioningColumn
}

// GetPartitioningColumnOk returns a tuple with the PartitioningColumn field value
// and a boolean to check if the value has been set.
func (o *DataSource) GetPartitioningColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartitioningColumn, true
}

// SetPartitioningColumn sets field value
func (o *DataSource) SetPartitioningColumn(v string) {
	o.PartitioningColumn = v
}

// GetDataSourceType returns the DataSourceType field value
func (o *DataSource) GetDataSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataSourceType
}

// GetDataSourceTypeOk returns a tuple with the DataSourceType field value
// and a boolean to check if the value has been set.
func (o *DataSource) GetDataSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSourceType, true
}

// SetDataSourceType sets field value
func (o *DataSource) SetDataSourceType(v string) {
	o.DataSourceType = v
}

// GetResourceId returns the ResourceId field value
func (o *DataSource) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *DataSource) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *DataSource) SetResourceId(v string) {
	o.ResourceId = v
}

// GetState returns the State field value
func (o *DataSource) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *DataSource) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *DataSource) SetState(v string) {
	o.State = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DataSource) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DataSource) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DataSource) SetDescription(v string) {
	o.Description = &v
}

func (o DataSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["dataSourceConfig"] = o.DataSourceConfig
	toSerialize["serialColumn"] = o.SerialColumn
	toSerialize["partitioningColumn"] = o.PartitioningColumn
	toSerialize["dataSourceType"] = o.DataSourceType
	toSerialize["resourceId"] = o.ResourceId
	toSerialize["state"] = o.State
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *DataSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"dataSourceConfig",
		"serialColumn",
		"partitioningColumn",
		"dataSourceType",
		"resourceId",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataSource := _DataSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataSource)

	if err != nil {
		return err
	}

	*o = DataSource(varDataSource)

	return err
}

type NullableDataSource struct {
	value *DataSource
	isSet bool
}

func (v NullableDataSource) Get() *DataSource {
	return v.value
}

func (v *NullableDataSource) Set(val *DataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSource(val *DataSource) *NullableDataSource {
	return &NullableDataSource{value: val, isSet: true}
}

func (v NullableDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


